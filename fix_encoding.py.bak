#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import shutil

def fix_file_encoding(file_path):
    """修复文件编码，确保使用UTF-8并正确声明"""
    try:
        # 读取文件内容
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # 备份原文件
        backup_path = file_path + '.bak'
        shutil.copy2(file_path, backup_path)
        
        # 确保文件有正确的编码声明
        lines = content.split('\n')
        encoding_declared = False
        
        # 检查是否已有编码声明
        for i, line in enumerate(lines[:3]):  # 检查前3行
            if '# -*- coding: utf-8 -*-' in line or '# coding: utf-8' in line:
                encoding_declared = True
                break
        
        # 如果是Python文件且没有编码声明，则添加
        if file_path.endswith('.py') and not encoding_declared:
            # 在第一行或第二行添加编码声明
            if lines[0].startswith('#!') and len(lines) > 1:
                lines.insert(1, '# -*- coding: utf-8 -*-')
            else:
                lines.insert(0, '# -*- coding: utf-8 -*-')
        
        # 重新组合内容
        new_content = '\n'.join(lines)
        
        # 以UTF-8编码写回文件
        with open(file_path, 'w', encoding='utf-8', newline='\n') as f:
            f.write(new_content)
        
        print(f"Fixed encoding for {file_path}")
        return True
    except Exception as e:
        print(f"Error fixing {file_path}: {e}")
        return False

def fix_project_files_encoding(root_dir):
    """修复项目中所有Python和HTML文件的编码"""
    fixed_count = 0
    error_count = 0
    
    for root, dirs, files in os.walk(root_dir):
        # 跳过虚拟环境和缓存目录
        dirs[:] = [d for d in dirs if d not in ['.venv', '__pycache__', '.pytest_cache']]
        
        for file in files:
            if file.endswith(('.py', '.html')):
                file_path = os.path.join(root, file)
                try:
                    if fix_file_encoding(file_path):
                        fixed_count += 1
                    else:
                        error_count += 1
                except Exception as e:
                    print(f"Error processing {file_path}: {e}")
                    error_count += 1
    
    print(f"\nFixed {fixed_count} files")
    if error_count > 0:
        print(f"Errors occurred in {error_count} files")

if __name__ == "__main__":
    project_root = r"E:\Development\Python\NetOps"
    fix_project_files_encoding(project_root)